OIL_VERSION = "2.5";

IMPLEMENTATION trampoline {

    /* This fix the default STACKSIZE of tasks */
    TASK {
        UINT32 STACKSIZE = 300 ;
    } ;

    /* This fix the default STACKSIZE of ISRs */
    ISR {
        UINT32 STACKSIZE = 200 ;
    } ;
};

CPU blink {
  OS config {
    STATUS = EXTENDED;
    PRETASKHOOK = TRUE;
    POSTTASKHOOK = TRUE;
    PAINT_STACK = TRUE;
    PAINT_REGISTERS = TRUE;
    
    BUILD = TRUE {
      TRAMPOLINE_BASE_PATH = "../../../../../..";
      APP_SRC = "blink.c";
      APP_NAME = "blink_exe";
      CFLAGS  = "-O0"; 
      LDFLAGS = "-Map=blink.map";
      COMPILER = "arm-none-eabi-gcc";
      ASSEMBLER = "arm-none-eabi-as";
      LINKER = "arm-none-eabi-ld";
      COPIER = "arm-none-eabi-objcopy";
      SYSTEM = PYTHON;
    };

    SYSTEM_CALL = TRUE;

    MEMMAP = TRUE {
      COMPILER = gcc;
      LINKER = gnu_ld { SCRIPT = "script.ld"; };
      ASSEMBLER = gnu_as;
      MEMORY_PROTECTION = FALSE;
    };
  };
  
  APPMODE std {};

  TASK SWC1_Init {
    SCHEDULE = NON;
    PRIORITY = 5;
    ACTIVATION = 1;
    AUTOSTART = TRUE { 
      APPMODE = std; 
    }; 
  };

  TASK SWC1_Task_250ms {
    SCHEDULE = FULL;
    PRIORITY = 3;
    ACTIVATION = 1;
    AUTOSTART = FALSE;
  };

  TASK SWC1_Task_500ms {
    SCHEDULE = FULL;
    PRIORITY = 2;
    ACTIVATION = 1;
    AUTOSTART = FALSE;
  };

/************************************************/  
  TASK SWC2_MainTask {
    SCHEDULE = FULL;
    PRIORITY = 4;
    ACTIVATION = 1;
    STACKSIZE = 300;
    AUTOSTART = TRUE { 
      APPMODE = std; 
    }; 

    EVENT = event1;
  };

  EVENT event1{
    MASK = 0x01;
  };
/************************************************/

  ALARM Alarm_250ms {
    COUNTER = SystemCounter;  /* The timer that we base on it */
    ACTION = ACTIVATETASK {
      TASK = SWC1_Task_250ms; /* Action is to activate a TASK */
    };
    AUTOSTART = TRUE {  /* Auto-Started Alarm */      
      APPMODE = std;
      ALARMTIME = 250; /* The time when the ALARM shall expire first */
      CYCLETIME = 250; /* The cycle time of a cyclic ALARM */
    };
  };

  ALARM Alarm_500ms {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
      TASK = SWC1_Task_500ms;
    };
    AUTOSTART = TRUE {
      APPMODE = std;
      ALARMTIME = 500; /* The time when the ALARM shall expire first */
      CYCLETIME = 500; /* The cycle time of a cyclic ALARM */
    };
  };

  ALARM Alarm_1000ms {
    COUNTER = SystemCounter;
    ACTION = ALARMCALLBACK {
      ALARMCALLBACKNAME = "Alarm_500msCallback";
    };
    AUTOSTART = TRUE {
      APPMODE = std;
      ALARMTIME = 1000; /* The time when the ALARM shall expire first */
      CYCLETIME = 1000; /* The cycle time of a cyclic ALARM */
    };
  };

  ALARM Alarm_2000ms {
    COUNTER = SystemCounter;
    ACTION = SETEVENT {
      TASK = SWC2_MainTask;
      EVENT = event1;
    };
    AUTOSTART = TRUE {
      APPMODE = std;
      ALARMTIME = 2000; /* The time when the ALARM shall expire first */
      CYCLETIME = 2000; /* The cycle time of a cyclic ALARM */
    };
  };
  
};

